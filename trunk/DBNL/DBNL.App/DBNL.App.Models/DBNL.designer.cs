#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBNL.App.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbnl")]
	public partial class DBNLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserInRole(UserInRole instance);
    partial void UpdateUserInRole(UserInRole instance);
    partial void DeleteUserInRole(UserInRole instance);
    partial void InsertContentRelation(ContentRelation instance);
    partial void UpdateContentRelation(ContentRelation instance);
    partial void DeleteContentRelation(ContentRelation instance);
    partial void InsertLink(Link instance);
    partial void UpdateLink(Link instance);
    partial void DeleteLink(Link instance);
    partial void InsertPoll(Poll instance);
    partial void UpdatePoll(Poll instance);
    partial void DeletePoll(Poll instance);
    partial void InsertPollQuestion(PollQuestion instance);
    partial void UpdatePollQuestion(PollQuestion instance);
    partial void DeletePollQuestion(PollQuestion instance);
    partial void InsertSupporter(Supporter instance);
    partial void UpdateSupporter(Supporter instance);
    partial void DeleteSupporter(Supporter instance);
    partial void InsertContentCategory(ContentCategory instance);
    partial void UpdateContentCategory(ContentCategory instance);
    partial void DeleteContentCategory(ContentCategory instance);
    partial void InsertContent(Content instance);
    partial void UpdateContent(Content instance);
    partial void DeleteContent(Content instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertNavigation(Navigation instance);
    partial void UpdateNavigation(Navigation instance);
    partial void DeleteNavigation(Navigation instance);
    partial void InsertBanner(Banner instance);
    partial void UpdateBanner(Banner instance);
    partial void DeleteBanner(Banner instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    #endregion
		
		public DBNLDataContext() : 
				base(global::DBNL.App.Models.Properties.Settings.Default.dbnlConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public DBNLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBNLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBNLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBNLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserInRole> UserInRoles
		{
			get
			{
				return this.GetTable<UserInRole>();
			}
		}
		
		public System.Data.Linq.Table<ContentRelation> ContentRelations
		{
			get
			{
				return this.GetTable<ContentRelation>();
			}
		}
		
		public System.Data.Linq.Table<Link> Links
		{
			get
			{
				return this.GetTable<Link>();
			}
		}
		
		public System.Data.Linq.Table<Poll> Polls
		{
			get
			{
				return this.GetTable<Poll>();
			}
		}
		
		public System.Data.Linq.Table<PollQuestion> PollQuestions
		{
			get
			{
				return this.GetTable<PollQuestion>();
			}
		}
		
		public System.Data.Linq.Table<Supporter> Supporters
		{
			get
			{
				return this.GetTable<Supporter>();
			}
		}
		
		public System.Data.Linq.Table<ContentCategory> ContentCategories
		{
			get
			{
				return this.GetTable<ContentCategory>();
			}
		}
		
		public System.Data.Linq.Table<Content> Contents
		{
			get
			{
				return this.GetTable<Content>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Navigation> Navigations
		{
			get
			{
				return this.GetTable<Navigation>();
			}
		}
		
		public System.Data.Linq.Table<Banner> Banners
		{
			get
			{
				return this.GetTable<Banner>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.UserInRole")]
	public partial class UserInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private int _UserId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public UserInRole()
		{
			this._User = default(EntityRef<User>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserInRole", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserInRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserInRole", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserInRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserInRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.ContentRelation")]
	public partial class ContentRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContentId;
		
		private int _RelatedId;
		
		private EntityRef<Content> _Content;
		
		private EntityRef<Content> _Content1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentIdChanging(int value);
    partial void OnContentIdChanged();
    partial void OnRelatedIdChanging(int value);
    partial void OnRelatedIdChanged();
    #endregion
		
		public ContentRelation()
		{
			this._Content = default(EntityRef<Content>);
			this._Content1 = default(EntityRef<Content>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContentId
		{
			get
			{
				return this._ContentId;
			}
			set
			{
				if ((this._ContentId != value))
				{
					if (this._Content.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentIdChanging(value);
					this.SendPropertyChanging();
					this._ContentId = value;
					this.SendPropertyChanged("ContentId");
					this.OnContentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RelatedId
		{
			get
			{
				return this._RelatedId;
			}
			set
			{
				if ((this._RelatedId != value))
				{
					if (this._Content1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelatedIdChanging(value);
					this.SendPropertyChanging();
					this._RelatedId = value;
					this.SendPropertyChanged("RelatedId");
					this.OnRelatedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_ContentRelation", Storage="_Content", ThisKey="ContentId", OtherKey="ContentId", IsForeignKey=true)]
		public Content Content
		{
			get
			{
				return this._Content.Entity;
			}
			set
			{
				Content previousValue = this._Content.Entity;
				if (((previousValue != value) 
							|| (this._Content.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Content.Entity = null;
						previousValue.ContentRelations.Remove(this);
					}
					this._Content.Entity = value;
					if ((value != null))
					{
						value.ContentRelations.Add(this);
						this._ContentId = value.ContentId;
					}
					else
					{
						this._ContentId = default(int);
					}
					this.SendPropertyChanged("Content");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_ContentRelation1", Storage="_Content1", ThisKey="RelatedId", OtherKey="ContentId", IsForeignKey=true)]
		public Content Content1
		{
			get
			{
				return this._Content1.Entity;
			}
			set
			{
				Content previousValue = this._Content1.Entity;
				if (((previousValue != value) 
							|| (this._Content1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Content1.Entity = null;
						previousValue.ContentRelations1.Remove(this);
					}
					this._Content1.Entity = value;
					if ((value != null))
					{
						value.ContentRelations1.Add(this);
						this._RelatedId = value.ContentId;
					}
					else
					{
						this._RelatedId = default(int);
					}
					this.SendPropertyChanged("Content1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.Link")]
	public partial class Link : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Url;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _UpdatedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.DateTime value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Link()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.Poll")]
	public partial class Poll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PollName;
		
		private string _Status;
		
		private EntitySet<PollQuestion> _PollQuestions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPollNameChanging(string value);
    partial void OnPollNameChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Poll()
		{
			this._PollQuestions = new EntitySet<PollQuestion>(new Action<PollQuestion>(this.attach_PollQuestions), new Action<PollQuestion>(this.detach_PollQuestions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PollName
		{
			get
			{
				return this._PollName;
			}
			set
			{
				if ((this._PollName != value))
				{
					this.OnPollNameChanging(value);
					this.SendPropertyChanging();
					this._PollName = value;
					this.SendPropertyChanged("PollName");
					this.OnPollNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_PollQuestion", Storage="_PollQuestions", ThisKey="Id", OtherKey="PollId")]
		public EntitySet<PollQuestion> PollQuestions
		{
			get
			{
				return this._PollQuestions;
			}
			set
			{
				this._PollQuestions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PollQuestions(PollQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Poll = this;
		}
		
		private void detach_PollQuestions(PollQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Poll = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.PollQuestion")]
	public partial class PollQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Question;
		
		private int _PollId;
		
		private string _Status;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _UpdatedDate;
		
		private int _Responses;
		
		private EntityRef<Poll> _Poll;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnPollIdChanging(int value);
    partial void OnPollIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.DateTime value);
    partial void OnUpdatedDateChanged();
    partial void OnResponsesChanging(int value);
    partial void OnResponsesChanged();
    #endregion
		
		public PollQuestion()
		{
			this._Poll = default(EntityRef<Poll>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollId", DbType="Int NOT NULL")]
		public int PollId
		{
			get
			{
				return this._PollId;
			}
			set
			{
				if ((this._PollId != value))
				{
					if (this._Poll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollIdChanging(value);
					this.SendPropertyChanging();
					this._PollId = value;
					this.SendPropertyChanged("PollId");
					this.OnPollIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Responses", DbType="Int NOT NULL")]
		public int Responses
		{
			get
			{
				return this._Responses;
			}
			set
			{
				if ((this._Responses != value))
				{
					this.OnResponsesChanging(value);
					this.SendPropertyChanging();
					this._Responses = value;
					this.SendPropertyChanged("Responses");
					this.OnResponsesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_PollQuestion", Storage="_Poll", ThisKey="PollId", OtherKey="Id", IsForeignKey=true)]
		public Poll Poll
		{
			get
			{
				return this._Poll.Entity;
			}
			set
			{
				Poll previousValue = this._Poll.Entity;
				if (((previousValue != value) 
							|| (this._Poll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Poll.Entity = null;
						previousValue.PollQuestions.Remove(this);
					}
					this._Poll.Entity = value;
					if ((value != null))
					{
						value.PollQuestions.Add(this);
						this._PollId = value.Id;
					}
					else
					{
						this._PollId = default(int);
					}
					this.SendPropertyChanged("Poll");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.Supporter")]
	public partial class Supporter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Type;
		
		private string _NickName;
		
		private string _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Supporter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NickName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.ContentCategory")]
	public partial class ContentCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CategoryName;
		
		private string _Key;
		
		private System.Nullable<int> _ParentCategoryId;
		
		private bool _IsFeatured;
		
		private bool _ShowOnHP;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _UpdatedDate;
		
		private string _Status;
		
		private bool _Invisible;
		
		private EntitySet<ContentCategory> _ContentCategories;
		
		private EntitySet<Content> _Contents;
		
		private EntitySet<Navigation> _Navigations;
		
		private EntityRef<ContentCategory> _ContentCategory1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnParentCategoryIdChanging(System.Nullable<int> value);
    partial void OnParentCategoryIdChanged();
    partial void OnIsFeaturedChanging(bool value);
    partial void OnIsFeaturedChanged();
    partial void OnShowOnHPChanging(bool value);
    partial void OnShowOnHPChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.DateTime value);
    partial void OnUpdatedDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnInvisibleChanging(bool value);
    partial void OnInvisibleChanged();
    #endregion
		
		public ContentCategory()
		{
			this._ContentCategories = new EntitySet<ContentCategory>(new Action<ContentCategory>(this.attach_ContentCategories), new Action<ContentCategory>(this.detach_ContentCategories));
			this._Contents = new EntitySet<Content>(new Action<Content>(this.attach_Contents), new Action<Content>(this.detach_Contents));
			this._Navigations = new EntitySet<Navigation>(new Action<Navigation>(this.attach_Navigations), new Action<Navigation>(this.detach_Navigations));
			this._ContentCategory1 = default(EntityRef<ContentCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCategoryId", DbType="Int")]
		public System.Nullable<int> ParentCategoryId
		{
			get
			{
				return this._ParentCategoryId;
			}
			set
			{
				if ((this._ParentCategoryId != value))
				{
					if (this._ContentCategory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ParentCategoryId = value;
					this.SendPropertyChanged("ParentCategoryId");
					this.OnParentCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFeatured", DbType="Bit NOT NULL")]
		public bool IsFeatured
		{
			get
			{
				return this._IsFeatured;
			}
			set
			{
				if ((this._IsFeatured != value))
				{
					this.OnIsFeaturedChanging(value);
					this.SendPropertyChanging();
					this._IsFeatured = value;
					this.SendPropertyChanged("IsFeatured");
					this.OnIsFeaturedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowOnHP", DbType="Bit NOT NULL")]
		public bool ShowOnHP
		{
			get
			{
				return this._ShowOnHP;
			}
			set
			{
				if ((this._ShowOnHP != value))
				{
					this.OnShowOnHPChanging(value);
					this.SendPropertyChanging();
					this._ShowOnHP = value;
					this.SendPropertyChanged("ShowOnHP");
					this.OnShowOnHPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invisible", DbType="Bit NOT NULL")]
		public bool Invisible
		{
			get
			{
				return this._Invisible;
			}
			set
			{
				if ((this._Invisible != value))
				{
					this.OnInvisibleChanging(value);
					this.SendPropertyChanging();
					this._Invisible = value;
					this.SendPropertyChanged("Invisible");
					this.OnInvisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCategory_ContentCategory", Storage="_ContentCategories", ThisKey="ID", OtherKey="ParentCategoryId")]
		public EntitySet<ContentCategory> ContentCategories
		{
			get
			{
				return this._ContentCategories;
			}
			set
			{
				this._ContentCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCategory_Content", Storage="_Contents", ThisKey="ID", OtherKey="CategoryId")]
		public EntitySet<Content> Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				this._Contents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCategory_Navigation", Storage="_Navigations", ThisKey="ID", OtherKey="CategoryId")]
		public EntitySet<Navigation> Navigations
		{
			get
			{
				return this._Navigations;
			}
			set
			{
				this._Navigations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCategory_ContentCategory", Storage="_ContentCategory1", ThisKey="ParentCategoryId", OtherKey="ID", IsForeignKey=true)]
		public ContentCategory ContentCategory1
		{
			get
			{
				return this._ContentCategory1.Entity;
			}
			set
			{
				ContentCategory previousValue = this._ContentCategory1.Entity;
				if (((previousValue != value) 
							|| (this._ContentCategory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentCategory1.Entity = null;
						previousValue.ContentCategories.Remove(this);
					}
					this._ContentCategory1.Entity = value;
					if ((value != null))
					{
						value.ContentCategories.Add(this);
						this._ParentCategoryId = value.ID;
					}
					else
					{
						this._ParentCategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ContentCategory1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentCategories(ContentCategory entity)
		{
			this.SendPropertyChanging();
			entity.ContentCategory1 = this;
		}
		
		private void detach_ContentCategories(ContentCategory entity)
		{
			this.SendPropertyChanging();
			entity.ContentCategory1 = null;
		}
		
		private void attach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.ContentCategory = this;
		}
		
		private void detach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.ContentCategory = null;
		}
		
		private void attach_Navigations(Navigation entity)
		{
			this.SendPropertyChanging();
			entity.ContentCategory = this;
		}
		
		private void detach_Navigations(Navigation entity)
		{
			this.SendPropertyChanging();
			entity.ContentCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.Content")]
	public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContentId;
		
		private string _Title;
		
		private string _Content1;
		
		private int _CategoryId;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _UpdatedDate;
		
		private bool _IsFocusing;
		
		private bool _IsFeatured;
		
		private string _Status;
		
		private int _Count;
		
		private string _UniqueKey;
		
		private string _Description;
		
		private string _Picture;
		
		private EntitySet<ContentRelation> _ContentRelations;
		
		private EntitySet<ContentRelation> _ContentRelations1;
		
		private EntitySet<Navigation> _Navigations;
		
		private EntityRef<ContentCategory> _ContentCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentIdChanging(int value);
    partial void OnContentIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContent1Changing(string value);
    partial void OnContent1Changed();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.DateTime value);
    partial void OnUpdatedDateChanged();
    partial void OnIsFocusingChanging(bool value);
    partial void OnIsFocusingChanged();
    partial void OnIsFeaturedChanging(bool value);
    partial void OnIsFeaturedChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnUniqueKeyChanging(string value);
    partial void OnUniqueKeyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    #endregion
		
		public Content()
		{
			this._ContentRelations = new EntitySet<ContentRelation>(new Action<ContentRelation>(this.attach_ContentRelations), new Action<ContentRelation>(this.detach_ContentRelations));
			this._ContentRelations1 = new EntitySet<ContentRelation>(new Action<ContentRelation>(this.attach_ContentRelations1), new Action<ContentRelation>(this.detach_ContentRelations1));
			this._Navigations = new EntitySet<Navigation>(new Action<Navigation>(this.attach_Navigations), new Action<Navigation>(this.detach_Navigations));
			this._ContentCategory = default(EntityRef<ContentCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContentId
		{
			get
			{
				return this._ContentId;
			}
			set
			{
				if ((this._ContentId != value))
				{
					this.OnContentIdChanging(value);
					this.SendPropertyChanging();
					this._ContentId = value;
					this.SendPropertyChanged("ContentId");
					this.OnContentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Content", Storage="_Content1", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content1
		{
			get
			{
				return this._Content1;
			}
			set
			{
				if ((this._Content1 != value))
				{
					this.OnContent1Changing(value);
					this.SendPropertyChanging();
					this._Content1 = value;
					this.SendPropertyChanged("Content1");
					this.OnContent1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._ContentCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFocusing", DbType="Bit NOT NULL")]
		public bool IsFocusing
		{
			get
			{
				return this._IsFocusing;
			}
			set
			{
				if ((this._IsFocusing != value))
				{
					this.OnIsFocusingChanging(value);
					this.SendPropertyChanging();
					this._IsFocusing = value;
					this.SendPropertyChanged("IsFocusing");
					this.OnIsFocusingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFeatured", DbType="Bit NOT NULL")]
		public bool IsFeatured
		{
			get
			{
				return this._IsFeatured;
			}
			set
			{
				if ((this._IsFeatured != value))
				{
					this.OnIsFeaturedChanging(value);
					this.SendPropertyChanging();
					this._IsFeatured = value;
					this.SendPropertyChanged("IsFeatured");
					this.OnIsFeaturedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueKey", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UniqueKey
		{
			get
			{
				return this._UniqueKey;
			}
			set
			{
				if ((this._UniqueKey != value))
				{
					this.OnUniqueKeyChanging(value);
					this.SendPropertyChanging();
					this._UniqueKey = value;
					this.SendPropertyChanged("UniqueKey");
					this.OnUniqueKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="VarChar(255)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_ContentRelation", Storage="_ContentRelations", ThisKey="ContentId", OtherKey="ContentId")]
		public EntitySet<ContentRelation> ContentRelations
		{
			get
			{
				return this._ContentRelations;
			}
			set
			{
				this._ContentRelations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_ContentRelation1", Storage="_ContentRelations1", ThisKey="ContentId", OtherKey="RelatedId")]
		public EntitySet<ContentRelation> ContentRelations1
		{
			get
			{
				return this._ContentRelations1;
			}
			set
			{
				this._ContentRelations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_Navigation", Storage="_Navigations", ThisKey="ContentId", OtherKey="ContentId")]
		public EntitySet<Navigation> Navigations
		{
			get
			{
				return this._Navigations;
			}
			set
			{
				this._Navigations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCategory_Content", Storage="_ContentCategory", ThisKey="CategoryId", OtherKey="ID", IsForeignKey=true)]
		public ContentCategory ContentCategory
		{
			get
			{
				return this._ContentCategory.Entity;
			}
			set
			{
				ContentCategory previousValue = this._ContentCategory.Entity;
				if (((previousValue != value) 
							|| (this._ContentCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentCategory.Entity = null;
						previousValue.Contents.Remove(this);
					}
					this._ContentCategory.Entity = value;
					if ((value != null))
					{
						value.Contents.Add(this);
						this._CategoryId = value.ID;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("ContentCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentRelations(ContentRelation entity)
		{
			this.SendPropertyChanging();
			entity.Content = this;
		}
		
		private void detach_ContentRelations(ContentRelation entity)
		{
			this.SendPropertyChanging();
			entity.Content = null;
		}
		
		private void attach_ContentRelations1(ContentRelation entity)
		{
			this.SendPropertyChanging();
			entity.Content1 = this;
		}
		
		private void detach_ContentRelations1(ContentRelation entity)
		{
			this.SendPropertyChanging();
			entity.Content1 = null;
		}
		
		private void attach_Navigations(Navigation entity)
		{
			this.SendPropertyChanging();
			entity.Content = this;
		}
		
		private void detach_Navigations(Navigation entity)
		{
			this.SendPropertyChanging();
			entity.Content = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Name;
		
		private string _Password;
		
		private string _Status;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _UpdatedDate;
		
		private bool _IsReadOnly;
		
		private EntitySet<UserInRole> _UserInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.DateTime value);
    partial void OnUpdatedDateChanged();
    partial void OnIsReadOnlyChanging(bool value);
    partial void OnIsReadOnlyChanged();
    #endregion
		
		public User()
		{
			this._UserInRoles = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles), new Action<UserInRole>(this.detach_UserInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReadOnly", DbType="Bit NOT NULL")]
		public bool IsReadOnly
		{
			get
			{
				return this._IsReadOnly;
			}
			set
			{
				if ((this._IsReadOnly != value))
				{
					this.OnIsReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._IsReadOnly = value;
					this.SendPropertyChanged("IsReadOnly");
					this.OnIsReadOnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserInRole", Storage="_UserInRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserInRole> UserInRoles
		{
			get
			{
				return this._UserInRoles;
			}
			set
			{
				this._UserInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _RoleName;
		
		private string _ContentPermission;
		
		private string _ComponentPermission;
		
		private bool _AllowManageUser;
		
		private bool _AllowManagePoll;
		
		private bool _AllowManageContact;
		
		private bool _AllowManageLink;
		
		private bool _AllowManageOnlineSupporter;
		
		private bool _IsFullPermission;
		
		private bool _AllowManageAllContent;
		
		private bool _AllowManageBanner;
		
		private bool _AllowManageMenu;
		
		private bool _AllowManageRole;
		
		private bool _IsReadOnly;
		
		private EntitySet<UserInRole> _UserInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnContentPermissionChanging(string value);
    partial void OnContentPermissionChanged();
    partial void OnComponentPermissionChanging(string value);
    partial void OnComponentPermissionChanged();
    partial void OnAllowManageUserChanging(bool value);
    partial void OnAllowManageUserChanged();
    partial void OnAllowManagePollChanging(bool value);
    partial void OnAllowManagePollChanged();
    partial void OnAllowManageContactChanging(bool value);
    partial void OnAllowManageContactChanged();
    partial void OnAllowManageLinkChanging(bool value);
    partial void OnAllowManageLinkChanged();
    partial void OnAllowManageOnlineSupporterChanging(bool value);
    partial void OnAllowManageOnlineSupporterChanged();
    partial void OnIsFullPermissionChanging(bool value);
    partial void OnIsFullPermissionChanged();
    partial void OnAllowManageAllContentChanging(bool value);
    partial void OnAllowManageAllContentChanged();
    partial void OnAllowManageBannerChanging(bool value);
    partial void OnAllowManageBannerChanged();
    partial void OnAllowManageMenuChanging(bool value);
    partial void OnAllowManageMenuChanged();
    partial void OnAllowManageRoleChanging(bool value);
    partial void OnAllowManageRoleChanged();
    partial void OnIsReadOnlyChanging(bool value);
    partial void OnIsReadOnlyChanged();
    #endregion
		
		public Role()
		{
			this._UserInRoles = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles), new Action<UserInRole>(this.detach_UserInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentPermission", DbType="NVarChar(250)")]
		public string ContentPermission
		{
			get
			{
				return this._ContentPermission;
			}
			set
			{
				if ((this._ContentPermission != value))
				{
					this.OnContentPermissionChanging(value);
					this.SendPropertyChanging();
					this._ContentPermission = value;
					this.SendPropertyChanged("ContentPermission");
					this.OnContentPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentPermission", DbType="NVarChar(250)")]
		public string ComponentPermission
		{
			get
			{
				return this._ComponentPermission;
			}
			set
			{
				if ((this._ComponentPermission != value))
				{
					this.OnComponentPermissionChanging(value);
					this.SendPropertyChanging();
					this._ComponentPermission = value;
					this.SendPropertyChanged("ComponentPermission");
					this.OnComponentPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowManageUser", DbType="Bit NOT NULL")]
		public bool AllowManageUser
		{
			get
			{
				return this._AllowManageUser;
			}
			set
			{
				if ((this._AllowManageUser != value))
				{
					this.OnAllowManageUserChanging(value);
					this.SendPropertyChanging();
					this._AllowManageUser = value;
					this.SendPropertyChanged("AllowManageUser");
					this.OnAllowManageUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowManagePoll", DbType="Bit NOT NULL")]
		public bool AllowManagePoll
		{
			get
			{
				return this._AllowManagePoll;
			}
			set
			{
				if ((this._AllowManagePoll != value))
				{
					this.OnAllowManagePollChanging(value);
					this.SendPropertyChanging();
					this._AllowManagePoll = value;
					this.SendPropertyChanged("AllowManagePoll");
					this.OnAllowManagePollChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowManageContact", DbType="Bit NOT NULL")]
		public bool AllowManageContact
		{
			get
			{
				return this._AllowManageContact;
			}
			set
			{
				if ((this._AllowManageContact != value))
				{
					this.OnAllowManageContactChanging(value);
					this.SendPropertyChanging();
					this._AllowManageContact = value;
					this.SendPropertyChanged("AllowManageContact");
					this.OnAllowManageContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowManageLink", DbType="Bit NOT NULL")]
		public bool AllowManageLink
		{
			get
			{
				return this._AllowManageLink;
			}
			set
			{
				if ((this._AllowManageLink != value))
				{
					this.OnAllowManageLinkChanging(value);
					this.SendPropertyChanging();
					this._AllowManageLink = value;
					this.SendPropertyChanged("AllowManageLink");
					this.OnAllowManageLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowManageOnlineSupporter", DbType="Bit NOT NULL")]
		public bool AllowManageOnlineSupporter
		{
			get
			{
				return this._AllowManageOnlineSupporter;
			}
			set
			{
				if ((this._AllowManageOnlineSupporter != value))
				{
					this.OnAllowManageOnlineSupporterChanging(value);
					this.SendPropertyChanging();
					this._AllowManageOnlineSupporter = value;
					this.SendPropertyChanged("AllowManageOnlineSupporter");
					this.OnAllowManageOnlineSupporterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFullPermission", DbType="Bit NOT NULL")]
		public bool IsFullPermission
		{
			get
			{
				return this._IsFullPermission;
			}
			set
			{
				if ((this._IsFullPermission != value))
				{
					this.OnIsFullPermissionChanging(value);
					this.SendPropertyChanging();
					this._IsFullPermission = value;
					this.SendPropertyChanged("IsFullPermission");
					this.OnIsFullPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowManageAllContent", DbType="Bit NOT NULL")]
		public bool AllowManageAllContent
		{
			get
			{
				return this._AllowManageAllContent;
			}
			set
			{
				if ((this._AllowManageAllContent != value))
				{
					this.OnAllowManageAllContentChanging(value);
					this.SendPropertyChanging();
					this._AllowManageAllContent = value;
					this.SendPropertyChanged("AllowManageAllContent");
					this.OnAllowManageAllContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowManageBanner", DbType="Bit NOT NULL")]
		public bool AllowManageBanner
		{
			get
			{
				return this._AllowManageBanner;
			}
			set
			{
				if ((this._AllowManageBanner != value))
				{
					this.OnAllowManageBannerChanging(value);
					this.SendPropertyChanging();
					this._AllowManageBanner = value;
					this.SendPropertyChanged("AllowManageBanner");
					this.OnAllowManageBannerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowManageMenu", DbType="Bit NOT NULL")]
		public bool AllowManageMenu
		{
			get
			{
				return this._AllowManageMenu;
			}
			set
			{
				if ((this._AllowManageMenu != value))
				{
					this.OnAllowManageMenuChanging(value);
					this.SendPropertyChanging();
					this._AllowManageMenu = value;
					this.SendPropertyChanged("AllowManageMenu");
					this.OnAllowManageMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowManageRole", DbType="Bit NOT NULL")]
		public bool AllowManageRole
		{
			get
			{
				return this._AllowManageRole;
			}
			set
			{
				if ((this._AllowManageRole != value))
				{
					this.OnAllowManageRoleChanging(value);
					this.SendPropertyChanging();
					this._AllowManageRole = value;
					this.SendPropertyChanged("AllowManageRole");
					this.OnAllowManageRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReadOnly", DbType="Bit NOT NULL")]
		public bool IsReadOnly
		{
			get
			{
				return this._IsReadOnly;
			}
			set
			{
				if ((this._IsReadOnly != value))
				{
					this.OnIsReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._IsReadOnly = value;
					this.SendPropertyChanged("IsReadOnly");
					this.OnIsReadOnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserInRole", Storage="_UserInRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<UserInRole> UserInRoles
		{
			get
			{
				return this._UserInRoles;
			}
			set
			{
				this._UserInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Email;
		
		private string _Status;
		
		private System.Nullable<int> _DepartmentId;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDepartmentIdChanging(System.Nullable<int> value);
    partial void OnDepartmentIdChanged();
    #endregion
		
		public Contact()
		{
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int")]
		public System.Nullable<int> DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Contact", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Department()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Contact", Storage="_Contacts", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.Navigation")]
	public partial class Navigation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _ParentId;
		
		private string _Position;
		
		private string _Status;
		
		private string _RelativeUrl;
		
		private System.Nullable<int> _DisplayOrder;
		
		private string _Image;
		
		private System.Nullable<int> _ContentId;
		
		private System.Nullable<int> _CategoryId;
		
		private string _Component;
		
		private string _ExternalUrl;
		
		private string _Action;
		
		private string _Controller;
		
		private string _Area;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _UpdatedDate;
		
		private string _CustomData;
		
		private EntitySet<Navigation> _Navigations;
		
		private EntityRef<Content> _Content;
		
		private EntityRef<ContentCategory> _ContentCategory;
		
		private EntityRef<Navigation> _Navigation1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnRelativeUrlChanging(string value);
    partial void OnRelativeUrlChanged();
    partial void OnDisplayOrderChanging(System.Nullable<int> value);
    partial void OnDisplayOrderChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnContentIdChanging(System.Nullable<int> value);
    partial void OnContentIdChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    partial void OnComponentChanging(string value);
    partial void OnComponentChanged();
    partial void OnExternalUrlChanging(string value);
    partial void OnExternalUrlChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnControllerChanging(string value);
    partial void OnControllerChanged();
    partial void OnAreaChanging(string value);
    partial void OnAreaChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.DateTime value);
    partial void OnUpdatedDateChanged();
    partial void OnCustomDataChanging(string value);
    partial void OnCustomDataChanged();
    #endregion
		
		public Navigation()
		{
			this._Navigations = new EntitySet<Navigation>(new Action<Navigation>(this.attach_Navigations), new Action<Navigation>(this.detach_Navigations));
			this._Content = default(EntityRef<Content>);
			this._ContentCategory = default(EntityRef<ContentCategory>);
			this._Navigation1 = default(EntityRef<Navigation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Navigation1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelativeUrl", DbType="NVarChar(50)")]
		public string RelativeUrl
		{
			get
			{
				return this._RelativeUrl;
			}
			set
			{
				if ((this._RelativeUrl != value))
				{
					this.OnRelativeUrlChanging(value);
					this.SendPropertyChanging();
					this._RelativeUrl = value;
					this.SendPropertyChanged("RelativeUrl");
					this.OnRelativeUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int")]
		public System.Nullable<int> DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentId", DbType="Int")]
		public System.Nullable<int> ContentId
		{
			get
			{
				return this._ContentId;
			}
			set
			{
				if ((this._ContentId != value))
				{
					if (this._Content.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentIdChanging(value);
					this.SendPropertyChanging();
					this._ContentId = value;
					this.SendPropertyChanged("ContentId");
					this.OnContentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._ContentCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Component", DbType="NVarChar(50)")]
		public string Component
		{
			get
			{
				return this._Component;
			}
			set
			{
				if ((this._Component != value))
				{
					this.OnComponentChanging(value);
					this.SendPropertyChanging();
					this._Component = value;
					this.SendPropertyChanged("Component");
					this.OnComponentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalUrl", DbType="VarChar(250)")]
		public string ExternalUrl
		{
			get
			{
				return this._ExternalUrl;
			}
			set
			{
				if ((this._ExternalUrl != value))
				{
					this.OnExternalUrlChanging(value);
					this.SendPropertyChanging();
					this._ExternalUrl = value;
					this.SendPropertyChanged("ExternalUrl");
					this.OnExternalUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NVarChar(100)")]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Controller", DbType="NVarChar(100)")]
		public string Controller
		{
			get
			{
				return this._Controller;
			}
			set
			{
				if ((this._Controller != value))
				{
					this.OnControllerChanging(value);
					this.SendPropertyChanging();
					this._Controller = value;
					this.SendPropertyChanged("Controller");
					this.OnControllerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="NVarChar(100)")]
		public string Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomData", DbType="NVarChar(500)")]
		public string CustomData
		{
			get
			{
				return this._CustomData;
			}
			set
			{
				if ((this._CustomData != value))
				{
					this.OnCustomDataChanging(value);
					this.SendPropertyChanging();
					this._CustomData = value;
					this.SendPropertyChanged("CustomData");
					this.OnCustomDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Navigation_Navigation", Storage="_Navigations", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Navigation> Navigations
		{
			get
			{
				return this._Navigations;
			}
			set
			{
				this._Navigations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_Navigation", Storage="_Content", ThisKey="ContentId", OtherKey="ContentId", IsForeignKey=true)]
		public Content Content
		{
			get
			{
				return this._Content.Entity;
			}
			set
			{
				Content previousValue = this._Content.Entity;
				if (((previousValue != value) 
							|| (this._Content.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Content.Entity = null;
						previousValue.Navigations.Remove(this);
					}
					this._Content.Entity = value;
					if ((value != null))
					{
						value.Navigations.Add(this);
						this._ContentId = value.ContentId;
					}
					else
					{
						this._ContentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Content");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentCategory_Navigation", Storage="_ContentCategory", ThisKey="CategoryId", OtherKey="ID", IsForeignKey=true)]
		public ContentCategory ContentCategory
		{
			get
			{
				return this._ContentCategory.Entity;
			}
			set
			{
				ContentCategory previousValue = this._ContentCategory.Entity;
				if (((previousValue != value) 
							|| (this._ContentCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentCategory.Entity = null;
						previousValue.Navigations.Remove(this);
					}
					this._ContentCategory.Entity = value;
					if ((value != null))
					{
						value.Navigations.Add(this);
						this._CategoryId = value.ID;
					}
					else
					{
						this._CategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ContentCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Navigation_Navigation", Storage="_Navigation1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Navigation Navigation1
		{
			get
			{
				return this._Navigation1.Entity;
			}
			set
			{
				Navigation previousValue = this._Navigation1.Entity;
				if (((previousValue != value) 
							|| (this._Navigation1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Navigation1.Entity = null;
						previousValue.Navigations.Remove(this);
					}
					this._Navigation1.Entity = value;
					if ((value != null))
					{
						value.Navigations.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Navigation1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Navigations(Navigation entity)
		{
			this.SendPropertyChanging();
			entity.Navigation1 = this;
		}
		
		private void detach_Navigations(Navigation entity)
		{
			this.SendPropertyChanging();
			entity.Navigation1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.Banner")]
	public partial class Banner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Url;
		
		private string _BannerImage;
		
		private string _Status;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _UpdatedDate;
		
		private string _BannerPosition;
		
		private int _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnBannerImageChanging(string value);
    partial void OnBannerImageChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.DateTime value);
    partial void OnUpdatedDateChanged();
    partial void OnBannerPositionChanging(string value);
    partial void OnBannerPositionChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public Banner()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerImage", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string BannerImage
		{
			get
			{
				return this._BannerImage;
			}
			set
			{
				if ((this._BannerImage != value))
				{
					this.OnBannerImageChanging(value);
					this.SendPropertyChanging();
					this._BannerImage = value;
					this.SendPropertyChanged("BannerImage");
					this.OnBannerImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerPosition", DbType="NVarChar(50)")]
		public string BannerPosition
		{
			get
			{
				return this._BannerPosition;
			}
			set
			{
				if ((this._BannerPosition != value))
				{
					this.OnBannerPositionChanging(value);
					this.SendPropertyChanging();
					this._BannerPosition = value;
					this.SendPropertyChanged("BannerPosition");
					this.OnBannerPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="artseed.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private string _JobDetail;
		
		private string _Company;
		
		private string _CompanyInfo;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _Deadline;
		
		private System.DateTime _UpdatedDate;
		
		private string _Status;
		
		private string _Key;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnJobDetailChanging(string value);
    partial void OnJobDetailChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnCompanyInfoChanging(string value);
    partial void OnCompanyInfoChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDeadlineChanging(System.DateTime value);
    partial void OnDeadlineChanged();
    partial void OnUpdatedDateChanging(System.DateTime value);
    partial void OnUpdatedDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    #endregion
		
		public Job()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDetail", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string JobDetail
		{
			get
			{
				return this._JobDetail;
			}
			set
			{
				if ((this._JobDetail != value))
				{
					this.OnJobDetailChanging(value);
					this.SendPropertyChanging();
					this._JobDetail = value;
					this.SendPropertyChanged("JobDetail");
					this.OnJobDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NVarChar(255)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyInfo", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string CompanyInfo
		{
			get
			{
				return this._CompanyInfo;
			}
			set
			{
				if ((this._CompanyInfo != value))
				{
					this.OnCompanyInfoChanging(value);
					this.SendPropertyChanging();
					this._CompanyInfo = value;
					this.SendPropertyChanged("CompanyInfo");
					this.OnCompanyInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deadline", DbType="DateTime NOT NULL")]
		public System.DateTime Deadline
		{
			get
			{
				return this._Deadline;
			}
			set
			{
				if ((this._Deadline != value))
				{
					this.OnDeadlineChanging(value);
					this.SendPropertyChanging();
					this._Deadline = value;
					this.SendPropertyChanged("Deadline");
					this.OnDeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
